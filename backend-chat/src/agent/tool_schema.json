[
  {
    "type": "function",
    "function": {
      "name": "generateImage",
      "description": "Generates an image using DALL-E 3.",
      "parameters": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "The detailed description of the image to generate. You must create a perfect prompt based on the users request or description. Think about the appropiate style and size of the image based on the final prompt."
          },
          "aspect_ratio": {
            "type": "string",
            "enum": ["ASPECT_1_1", "ASPECT_1_3", "ASPECT_3_1", "ASPECT_3_4", "ASPECT_4_3", "ASPECT_16_9", "ASPECT_3_2", "ASPECT_2_3", "ASPECT_9_16", "ASPECT_16_10","ASPECT_10_16"],
            "description": " The aspect ratio to use for image generation, which determines the image's resolution. Defaults to ASPECT_1_1."
          },
          "model": {
            "type": "string",
            "enum": ["V_1", "V_1_TURBO", "V_2", "V_2_TURBO"],
            "description": "The model used to generate an image or edit one. /generate and /remix supports all model types, however, /edit is only supported for V_2 and V_2_TURBO."
          },
          "magic_prompt_option": {
            "type": "string",
            "enum": ["AUTO", "ON", "OFF"],
            "description": "Determine if MagicPrompt should be used in generating the request or not."
          },
          "style_type": {
            "type": "string",
            "description": "The style type to generate with; this is only applicable for models V_2 and above and should not be specified for model versions V_1.",
            "enum": ["AUTO", "GENERAL", "REALISTIC", "DESIGN", "RENDER_3D", "ANIME"]
          }
        },
        "required": ["prompt", "aspect_ratio", "model", "magic_prompt_option", "style_type"],
        "additionalProperties": false
      },
      "strict": true
    }
  },
  {
    "type": "function",
    "function": {
      "name": "searchWeb",
      "description": "Performs a web search for the given query and returns text content with an array of citations. The returned content is comprehensive and should be provided in full to the user (DO NOT SUMMERIZE IT), with only additonal thoughts and commentary to the response content in your unique style.",
      "parameters": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "The query string to search for."
          }
        },
        "required": ["query"],
        "additionalProperties": false
      },
      "strict": true
    }
  },
  {
    "type": "function",
    "function": {
      "name": "wikiSearch",
      "description": "Searches Wikipedia for the given query. Taylor the search based on the users request.",
      "parameters": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "Action to perform, usually 'query'."
          },
          "searchString": {
            "type": "string",
            "description": "The term or phrase to search for on Wikipedia."
          }
        },
        "required": ["action", "searchString"],
        "additionalProperties": false
      },
      "strict": true
    }
  },
  {
    "type": "function",
    "function": {
      "name": "getStockInfo",
      "description": "Fetches detailed financial data about specified stocks.",
      "parameters": {
        "type": "object",
        "properties": {
          "tickers": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Stock ticker symbols to retrieve data for."
          },
          "info_types": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["current_price", "dividends", "splits", "company_info", "financials", "recommendations"]
            },
            "description": "The specific types of stock information to retrieve."
          }
        },
        "required": ["tickers", "info_types"],
        "additionalProperties": false
      },
      "strict": true
    }
  },
  {
    "type": "function",
    "function": {
      "name": "getCryptoInfoFromCMC",
      "description": "Fetches crypto market data for a specified token.",
      "parameters": {
        "type": "object",
        "properties": {
          "token_symbol": {
            "type": "string",
            "description": "The symbol of the cryptocurrency to look up."
          }
        },
        "required": ["token_symbol"],
        "additionalProperties": false
      },
      "strict": true
    }
  },
  {
    "type": "function",
    "function": {
      "name": "queryArxiv",
      "description": "Fetches academic papers from arXiv. Taylor  the search and number of results to return based on the users request.",
      "parameters": {
        "type": "object",
        "properties": {
          "search_query": {
            "type": "string",
            "description": "The search query for the papers."
          },
          "max_results": {
            "type": "integer",
            "description": "The number of papers to return."
          },
          "sort_by": {
            "type": "string",
            "enum": ["relevance", "lastUpdatedDate", "submittedDate"],
            "description": "The sorting method for the results."
          },
          "sort_order": {
            "type": "string",
            "enum": ["ascending", "descending"],
            "description": "The sorting order of the results."
          }
        },
        "required": ["search_query", "max_results", "sort_by", "sort_order"],
        "additionalProperties": false
      },
      "strict": true
    }
  },
  {
    "type": "function",
    "function": {
      "name": "getTrendingCryptos",
      "description": "Fetches trending tokens from coingecko.",
      "parameters": {
        "type": "object",
        "properties": {
          "option": {
            "type": "string",
            "enum": ["popularity", "top_gainers", "market_cap"],
            "description": "The metric to use for identifying trends."
          },
          "limit": {
            "type": "integer",
            "enum": [10, 20, 50, 100, 250],
            "description": "The number of results to return."
          }
        },
        "required": ["option", "limit"],
        "additionalProperties": false
      },
      "strict": true
    }
  },
  {
    "type": "function",
    "function": {
      "name": "searchNftCollection",
      "description": "Searches for an NFT collection on specified blockchain",
      "parameters": {
        "type": "object",
        "properties": {
          "collection_name": {
            "type": "string",
            "description": "The name of the NFT collection to search for."
          },
          "chain": {
            "type": "string",
            "enum": ["aptos", "sui", "movement"],
            "description": "The blockchain to search on."
          }
        },
        "required": ["collection_name", "chain"],
        "additionalProperties": false
      },
      "strict": true
    }
  },
  {
    "type": "function",
    "function": {
      "name": "searchTrendingNFT",
      "description": "Fetches trending NFT collections based on specified metrics.",
      "parameters": {
        "type": "object",
        "properties": {
          "period": {
            "type": "string",
            "enum": ["days_1", "days_7", "days_14", "days_30", "days_60", "days_90", "all_time"],
            "description": "The timeframe for identifying trends."
          },
          "trending_by": {
            "type": "string",
            "enum": ["crypto_volume", "usd_volume", "trades_count", "average_trade"],
            "description": "The metric used to identify trends."
          },
          "limit": {
            "type": "integer",
            "enum": [5, 10, 20, 40],
            "description": "The number of results to return."
          },
          "chain": {
            "type": "string",
            "enum": ["aptos", "sui", "movement"],
            "description": "The blockchain to fetch trending collections from."
          }
        },
        "required": ["period", "trending_by", "limit", "chain"],
        "additionalProperties": false
      },
      "strict": true
    }
  },
  {
    "type": "function",
    "function": {
      "name": "createSoundEffect",
      "description": "Generates a sound effect based on a provided descriptive prompt that you must create based on the users request. Think about and use the duration and prompt influence to create a sound effect that is unique, creative, and appropiate for the users request.",
      "parameters": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "The description of the sound to generate."
          },
          "duration_seconds": {
            "type": "number",
            "description": "The duration of the sound in seconds - minimum 0.5, maximum 20."
          },
          "prompt_influence": {
            "type": "number",
            "description": "Controls how closely to follow the provided description - minimum 0, maximum 1."
          }
        },
        "required": ["text", "duration_seconds", "prompt_influence"],
        "additionalProperties": false
      },
      "strict": true
    }
  },
  {
    "type": "function",
    "function": {
      "name": "fetchUserNFTCollections",
      "description": "Fetches NFT collections associated with the user's Aptos wallet.",
      "parameters": {
        "type": "object",
        "properties": {},
        "additionalProperties": false
      },
      "strict": true
    }
  },
  {
    "type": "function",
    "function": {
      "name": "getAllTopics",
      "description": "Fetches all available topics from lens.",
      "parameters": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "The date to fetch topics with format YYYY-MM-DD."
          },
          "protocol": {
            "type": "string",
            "enum": ["Lens", "Farcaster"],
            "description": "The protocol to fetch topics from."
          }
        },
        "additionalProperties": false,
        "required": ["date", "protocol"]
      },
      "strict": true
    }
  },
  {
    "type": "function",
    "function": {
      "name": "getTokenStats",
      "description": "Fetches token stats from lens and Farcaster.",
      "parameters": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "enum": [5, 10, 15, 25, 50],
            "description": "The number of results to return."
          },
          "page": {
            "type": "integer",
            "description": "The page number for pagination."
          },
          "protocol": {
            "type": "string",
            "enum": ["Lens", "Farcaster"],
            "description": "The protocol to fetch stats from."
          }
        },
        "required": ["limit", "page", "protocol"],
        "additionalProperties": false
      },
      "strict": true
    }
  },
  {
    "type": "function",
    "function": {
      "name": "getTrendingUsers",
      "description": "Fetches trending users from lens and Farcaster based on specified query",
      "parameters": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "The page number for pagination."
          },
          "limit": {
            "type": "integer",
            "description": "The number of results to return."
          },
          "ratio": {
            "type": "string",
            "enum": ["Likes", "Followers"],
            "description": "The ratio of posts to followers."
          },
          "protocol": {
            "type": "string",
            "enum": ["Lens", "Farcaster"]
          }
        },
        "additionalProperties": false,
        "required": ["page", "limit", "ratio", "protocol"]
        
      },
      "strict": true
    }
  },
  {
    "type": "function",
    "function": {
      "name": "getMentionsTwitter",
      "description": "Fetches recent mentions from Twitter.",
      "parameters": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The number of results to return."
          },
          "offset": {
            "type": "integer",
            "description": "The offset for pagination."
          }
        },
        "required": ["limit", "offset"],
        "additionalProperties": false
      },
      "strict": true
    }
  },
  {
    "type": "function",
    "function": {
      "name": "getTopMentionsTwitter",
      "description": "Fetches the most significant mentions from Twitter according to specified cashtag or ticker.",
      "parameters": {
        "type": "object",
        "properties": {
          "ticker": {
            "type": "string",
            "description": "The ticker symbol to get mentions for. Prefixing with $ will only return cashtag matches."
          },
          "timeWindow": {
            "type": "string",
            "description": "Time window for mentions (eg., 1h, 24h, 7d).",
            "enum": ["1h", "24h", "7d"]
          },
          "page": {
            "type": "integer",
            "description": "Page number for pagination."
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of results per page."
          },
          "includeAccountDetails": {
            "type": "boolean",
            "description": "Include account details (username, description, profile image url)."
          }
        },
        "additionalProperties": false,
        "required": ["ticker", "timeWindow", "page", "pageSize", "includeAccountDetails"]
      },
      "strict": true
    }
  },
  {
    "type": "function",
    "function": {
      "name": "getTrendingTokensTwitter",
      "description": "Retrieve trending tokens in twitter based on highest mentions count, filtered by a minimum mention threshold over a specified time period.",
      "parameters": {
        "type": "object",
        "properties": {
          "timeWindow": {
            "type": "string",
            "description": "Time window for mentions (eg., 1h, 24h, 7d).",
            "enum": ["1h", "24h", "7d"]
          },
          "page": {
            "type": "integer",
            "description": "Page number for pagination."
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of results per page."
          },
          "minMentions": {
            "type": "integer",
            "description": "Minimum mention count for a token to be considered."
          }
        },
        "additionalProperties": false,
        "required": ["minMentions", "timeWindow", "page", "pageSize"]
      },
      "strict": true
    }
  },
  {
    "type": "function",
    "function": {
      "name": "getOnchainActions",
      "description": "Performs on-chain actions on the Aptos blockchain. This tool handles operations such as viewing token balances, token details, wallet address, executing token swaps on Panora, transferring tokens, interacting with DeFi protocols (Joule Finance, Panora, Emojicoins). Always describe transactions in human-readable format before executing them, explaining the purpose, assets involved, costs, and potential risks.",
      "parameters": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "A clear and specific instruction for the on-chain action. Include critical details such as: 1) Action type (swap, transfer, deposit, withdrawal, balance check, token details, token price, token list); 2) Token names, symbols and amounts; 3) Protocol specification (e.g., 'on Panora', 'on Emojicoin'); 4) For swaps, specify 'native' when performing a local swap (not cross-chain); 5) For withdrawals from DeFi protocols, request less than the total deposited amount; 6) When swapping multiple tokens (like Emojicoins), use clear connecting words to indicate they are part of a single transaction. Example formats: 'swap 1 APT to USDC on Panora native', 'check my APT balance', 'withdraw 0.5 APT from Joule Finance'."
          }
        },
        "required": ["prompt"],
        "additionalProperties": false
      
      }
    },
    "strict": true
  }
]
